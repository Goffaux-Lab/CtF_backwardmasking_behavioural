%% alpha blending the stimuli in the white noise
% one way (as close as what xpman program does):
% a weighted sum of the luminance values of each pixel of the image
% and the background. 

close all; clear; clc

basefolder = '/home/jschuurmans/Documents/02_recurrentSF_3T/recurrentSF_3T_CodeRepo/stimuli_matlab/';
outfolder_stim = [basefolder 'stimuli/'];
outfolder_back = [basefolder 'background/'];
load([basefolder 'CTFV1_PROC.mat'])
addpath(basefolder)

load([basefolder 'CTFV1_BACK.mat'],'LC','*back', 'imset','nim','nblockspercondition')

backgrounds = 8


outputmat = 'CTFV1_BLEND.mat';

%load([basefolder 'CTFV1_BLEND.mat'])
scalefactor = [3 2];
xySize = size(imset.eq_stim{1});
finalSize = [550,550];
padSize = round((finalSize - xySize)/2);

[MaskIm,~,MaskAlpha] = (imread([basefolder 'blurrymask.png']));
MaskAlpha = single(MaskAlpha); MaskAlpha = imresize(MaskAlpha,(1/scalefactor(1)));


cut = round((length(MaskAlpha)-finalSize(1))/2);
MaskAlpha = MaskAlpha./max(MaskAlpha(:));
MaskAlpha = MaskAlpha(cut:end-(cut+1),cut:end-(cut+1));


imshow(MaskAlpha)
imshow(1-MaskAlpha)

%MaskAlpha = imresize(MaskAlpha,1.2,'nearest');
%%%%%%%%%%%%%% is necessary for selecting backgroundpixels since
%%%%%%%%%%%%%% the blurrymask contains pixels in the border of
%%%%%%%%%%%%%% the outline with the same value as the background 
%making average mask for normalization of noise
blobFinding = MaskAlpha;
blobFinding(blobFinding == blobFinding(1,1)) = 1; % making the background more distinct
s = regionprops(blobFinding == 1 , 'Area', 'PixelList'); % to create the mask, check where the value is 1
t = regionprops(blobFinding == 0 , 'Area', 'PixelList');
blobs = [s.Area].'; % checking where blobs excist adjecent areas with pix value 1
blobsFace = [t.Area].';
ind = find(blobs == blobs(1)); % index these pixels 
indFace = find(blobsFace == blobsFace(1));
pix = s(ind).PixelList; % finding the "pixels" it belongs to
pixFace = t(indFace).PixelList; 


%creating the mask
MaskBack = logical(full(sparse(pix(:,2), pix(:,1), 1, size(blobFinding,1), size(blobFinding,2))));
MaskFace = logical(full(sparse(pixFace(:,2), pixFace(:,1), 1, size(blobFinding,1), size(blobFinding,2))));
%imshow(MaskBack)
%imshow(MaskFace)
imwrite(MaskFace,[basefolder 'MaskFace'],'BMP')
imwrite(MaskBack,[basefolder 'MaskBack'],'BMP')


signalcontrast = 0.45;
alpha = 1-signalcontrast;
SNR = signalcontrast/alpha;
%LC = [0.45 0.1]; % desired luminance and contrast

stimuli = {'Stim' 'MaskLSF' 'MaskHSF'}; %stimuli and mask

%preallocate for speed
finalstim_backpixLC = cell(backgrounds,length(stimuli)); %preallocate
finalstim_facepixLC = cell(backgrounds,length(stimuli)); %preallocate
finalbackim_backpixLC = cell(backgrounds,length(stimuli)); %preallocate
finalbackim_facepixLC = cell(backgrounds,length(stimuli)); %preallocate

for theback = 1:backgrounds % for all scrambled backgrounds
    fprintf('bleding and safing images for %d background \n',theback)
    if theback < 10
        backname = ['BG0' num2str(theback)];
    else
        backname = ['BG' num2str(theback)];
    end

    for thestim = 1:length(stimuli) %stim, maskLSF, maskHSF
        %naming for checking and saving
        stimulus  = char(stimuli(thestim)) ;
        if thestim == 1
            set = imset.eq_stim;
        elseif thestim == 2 %Mask LSF
            set = imset.mask(thestim-1,:);
        elseif thestim == 3 %Mask HSF 
            set = imset.mask(thestim-1,:);
        end
        for theface = 1:length(nim) %for all faces
            backim = imset.iter_back{theback};
            %imshow(backim)
            fprintf('mean: %f - std: %f - back %d\n',mean2(backim),std2(backim),theback) % check contr and lum for the background
            backim = backim*alpha;

            signalim = set{theface};

            signalim = signalim*signalcontrast;
            signalim =  (signalim.*(1-MaskAlpha) ) + (backim.* (MaskAlpha));			
            blendim = signalim;

            %imshow(blendim)
            blendim = blendim - mean2(blendim); %normalize blend stim part 1
            blendim = blendim / std2(blendim); %normalize blend stim part 2
            blendim	= (blendim*LC(2)) + LC(1); %desired lum and contrast
            fprintf('mean: %f - std: %f - face %d for type: %s %s blendedddd\n',mean2(blendim),std2(blendim),theface,stimtype,stimulus) % check contr and lum for the background

            % replace background pixels of the blend image by the original ones
            backim = imset.iter_back{theback};
            blendim(backpixindex) = backim(backpixindex);
            imshow(blendim); 

            imset.blendim{theback,thestim,theface} = blendim;     	

            finalstim_backpixLC{theback,thestim}(theface,:) = [mean(blendim(backpixindex)) std(blendim(backpixindex))]; %%%% $$$$$$
            finalstim_facepixLC{theback,thestim}(theface,:) = [mean(blendim(facepixindex)) std(blendim(facepixindex))]; %%%% $$$$$$

            % saving the stimuli with correct naming
            if theface < 10
                facenum = ['0' num2str(theface)];
            else
                facenum = num2str(theface);
            end                

            name = [backname '_' stimulus '_' facenum];

            imwrite(blendim,[outfolder_stim name '.bmp'],'BMP')

        end
        backim = imset.iter_back{theback};
        imshow(backim); 
        finalbackim_backpixLC{theback,thestim} = [mean(backim(backpixindex)) std(backim(backpixindex))]; %%%% $$$$$$
        finalbackim_facepixLC{theback,thestim} = [mean(backim(facepixindex)) std(backim(facepixindex))] ;%%%% $$$$$$

        imwrite(backim,[outfolder_back backname '.bmp'],'BMP')
    end
end




%%

disp('saving..')
save([basefolder outputmat],'-v7.3')


